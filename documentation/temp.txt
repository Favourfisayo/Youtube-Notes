Okay so we built an AI Notes extension that works as follows:
1. Firstly we configured our manifest.json file that granted permissions to the resources we would be using 
in the project such as 'activeTab', 'scripting' and so on...

2. Secondly, we know that the AI extension would take the videoId of a Youtube video and generate a transcript of 
the video and send this transcript to Gemini's AI model(Because OpenAI API free quota was exceeded), Knowing this we 
built a dedicated backend to 1: Get the transcript of the video using the videoId with python and 2: Take this transcript
and use Gemini's API to get the note summary.(We used a dedicated backend mainly because of CORS policy and free API's do not offer)

3.So now in our frontend, when we click on the generateNotes button we inject the content.js file by sending a message, an object {action: 'getTranscript'} into the YT video:
    The content.js file receives the message and does the following:
            1.Get the videoId of the page
            2.Sends the request to our backend http://localhost:300/{videoId}
            3. And sends the response {notes: data.notes, videoId: data.videoId}
            4. return true to allow async response i.e to keep the channel open because the response might take some time...


4. So when our frontend gets this response:
            1. we use "chrome.storage.local.set({savedNotes: {formatted_note}, videoId: currentVideoId})" to update the local storage for persistence
            2. we format it properly using the marked module and output it to the notesOutput container and also a download button
            3. So when our popup loads or mounts using the document.addEventListener('DOMContentLoaded'):
                    1.We load the savedNotes and videoId from the storage
                    2. then we check if we have any saved Notes at all and make this check:
                                        *if and only if the videoId matches the currentVideoId would we render the notes 
                                        in the container and also a download button
                    The code: 
                    chrome.storage.local.get(['savedNotes', 'videoId'], (data) => {
                    if (data.savedNotes && data.videoId === currentVideoId) {
                    const htmlNotes = marked.parse(data.savedNotes);
                    document.getElementById('notesOutput').innerHTML = htmlNotes;
                    document.getElementById('downloadBtn').hidden = false;
                    }
                }); 
            4. When we click the download button we use html2pdf to download the note as pdf or .txt

